name: PostgreSQL Migration Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-pg-migration:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        old_version: [13, 14, 15]
        new_version: [16, 17]
        exclude:
          - old_version: 16
            new_version: 16
          - old_version: 17
            new_version: 17
          - old_version: 15
            new_version: 13
          - old_version: 15
            new_version: 14

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Docker volumes
      run: |
        docker volume create pg_old_data
        docker volume create pg_new_data

    - name: Start old PostgreSQL container and populate with test data
      run: |
        # Start old postgres container
        docker run -d \
          --name pg_old \
          -e POSTGRES_PASSWORD=testpass \
          -e POSTGRES_USER=testuser \
          -e POSTGRES_DB=postgres \
          -v pg_old_data:/var/lib/postgresql/data \
          postgres:${{ matrix.old_version }}-alpine
        
        # Wait for it to be ready
        sleep 10
        docker exec pg_old pg_isready -U testuser
        
        # Create test database and data
        docker exec pg_old psql -U testuser -d postgres -c "
          CREATE DATABASE testdb;
        "
        docker exec pg_old psql -U testuser -d testdb -c "
          CREATE TABLE users (id SERIAL PRIMARY KEY, name VARCHAR(100), email VARCHAR(100));
          INSERT INTO users (name, email) VALUES 
            ('Alice', 'alice@example.com'),
            ('Bob', 'bob@example.com'),
            ('Charlie', 'charlie@example.com');
          CREATE INDEX idx_users_email ON users(email);
          CREATE TABLE orders (id SERIAL PRIMARY KEY, user_id INT REFERENCES users(id), amount DECIMAL(10,2));
          INSERT INTO orders (user_id, amount) VALUES (1, 99.99), (2, 149.50), (1, 75.25);
        "
        
        # Stop the old container (database should persist in volume)
        docker stop pg_old
        docker rm pg_old

    - name: Build migration Docker image
      run: |
        cat > Dockerfile.migrate << 'EOF'
        FROM postgres:${{ matrix.new_version }}-alpine
        
        # Install both PostgreSQL versions for migration
        RUN apk add --no-cache postgresql${{ matrix.old_version }}
        
        # Copy migration script
        COPY migrate.sh /usr/local/bin/migrate.sh
        RUN chmod +x /usr/local/bin/migrate.sh
        
        # Create mount points
        RUN mkdir -p /var/lib/postgresql/old /var/lib/postgresql/new
        
        ENTRYPOINT ["/usr/local/bin/migrate.sh"]
        EOF
        
        docker build -f Dockerfile.migrate -t pg-migrator:test .

    - name: Run migration in dedicated container
      run: |
        # Run migration container with both volumes mounted
        docker run --rm \
          --name pg_migrator \
          -v pg_old_data:/var/lib/postgresql/old:ro \
          -v pg_new_data:/var/lib/postgresql/new \
          -e OLD_PG_VERSION=${{ matrix.old_version }} \
          -e NEW_PG_VERSION=${{ matrix.new_version }} \
          -e UID=999 \
          -e GID=999 \
          pg-migrator:test

    - name: Start new PostgreSQL container and verify migration
      run: |
        # Start new postgres container with migrated data
        docker run -d \
          --name pg_new \
          -e POSTGRES_PASSWORD=testpass \
          -e POSTGRES_USER=testuser \
          -e POSTGRES_DB=postgres \
          -v pg_new_data:/var/lib/postgresql/data \
          postgres:${{ matrix.new_version }}-alpine
        
        # Wait for it to be ready
        sleep 10
        docker exec pg_new pg_isready -U testuser

    - name: Verify data integrity and functionality
      run: |
        echo "🔍 Verifying migration results..."
        
        # Check databases exist
        DBS=$(docker exec pg_new psql -U testuser -d postgres -t -c "SELECT COUNT(*) FROM pg_database WHERE datname IN ('testdb');")
        if [ "$DBS" -ne 1 ]; then
          echo "❌ Database verification failed: testdb not found"
          exit 1
        fi
        
        # Verify table record counts
        USER_COUNT=$(docker exec pg_new psql -U testuser -d testdb -t -c "SELECT COUNT(*) FROM users;")
        ORDER_COUNT=$(docker exec pg_new psql -U testuser -d testdb -t -c "SELECT COUNT(*) FROM orders;")
        
        if [ "$USER_COUNT" -ne 3 ]; then
          echo "❌ User data verification failed: expected 3 records, got $USER_COUNT"
          exit 1
        fi
        
        if [ "$ORDER_COUNT" -ne 3 ]; then
          echo "❌ Order data verification failed: expected 3 records, got $ORDER_COUNT"
          exit 1
        fi
        
        # Verify index exists
        INDEX_COUNT=$(docker exec pg_new psql -U testuser -d testdb -t -c "SELECT COUNT(*) FROM pg_indexes WHERE indexname = 'idx_users_email';")
        if [ "$INDEX_COUNT" -ne 1 ]; then
          echo "❌ Index verification failed: index not found"
          exit 1
        fi
        
        # Test foreign key relationship works
        JOIN_RESULT=$(docker exec pg_new psql -U testuser -d testdb -t -c "SELECT COUNT(*) FROM users u JOIN orders o ON u.id = o.user_id WHERE u.name = 'Alice';")
        if [ "$JOIN_RESULT" -ne 2 ]; then
          echo "❌ Relationship verification failed: expected 2 orders for Alice"
          exit 1
        fi
        
        # Test that PostgreSQL version is correct
        PG_VERSION=$(docker exec pg_new psql -U testuser -d postgres -t -c "SHOW server_version;" | grep -o '[0-9]\+' | head -1)
        if [ "$PG_VERSION" -ne ${{ matrix.new_version }} ]; then
          echo "❌ Version verification failed: expected ${{ matrix.new_version }}, got $PG_VERSION"
          exit 1
        fi
        
        echo "✅ All verifications passed!"
        echo "✅ Successfully migrated from PostgreSQL ${{ matrix.old_version }} to ${{ matrix.new_version }}"
        echo "✅ Data integrity maintained across container boundaries"

    - name: Cleanup containers and volumes
      if: always()
      run: |
        echo "🧹 Cleaning up..."
        docker stop pg_new pg_old 2>/dev/null || true
        docker rm pg_new pg_old pg_migrator 2>/dev/null || true
        docker volume rm pg_old_data pg_new_data 2>/dev/null || true
        docker rmi pg-migrator:test 2>/dev/null || true

    - name: Show migration logs on failure
      if: failure()
      run: |
        echo "📋 Migration container logs:"
        docker logs pg_migrator 2>/dev/null || echo "No migration logs available"
        echo "📋 New database container logs:"
        docker logs pg_new 2>/dev/null || echo "No new database logs available"